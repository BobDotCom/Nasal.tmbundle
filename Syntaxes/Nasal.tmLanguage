<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>nas</string>
	</array>
	<key>name</key>
	<string>Nasal</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>comment</key>
			<string>Match identifiers in ALL_CAPS as constants, except when followed by `.`, `(`, `'`, or `"`.</string>
			<key>match</key>
			<string>\b([[:upper:]_][[:upper:][:digit:]_]*)\b(?![\.\(\'\"])</string>
			<key>name</key>
			<string>constant.other.allcaps.nasal</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&lt;=func)\s*(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.nasal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.nasal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.other.nasal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\w</string>
					<key>name</key>
					<string>variable.parameter.nasal</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.class.nasal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.nasal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.nasal</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.nasal</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>match stuff like: Sound.play = func() { … }</string>
			<key>match</key>
			<string>([a-zA-Z_?.$][\w?.$]*)\.([a-zA-Z_?.$][\w?.$]*)\s*(=)\s*(func)\b</string>
			<key>name</key>
			<string>meta.function.nasal</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.nasal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.nasal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.nasal</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>match stuff like: play = func() { … }</string>
			<key>match</key>
			<string>([a-zA-Z_?$][\w?$]*)\s*(=)\s*(func)\b</string>
			<key>name</key>
			<string>meta.function.nasal</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.nasal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.nasal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.nasal</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>match stuff like: play = (func() { … }</string>
			<key>match</key>
			<string>([a-zA-Z_?$][\w?$]*)\s*(=)\s*\(\s*(func)\b</string>
			<key>name</key>
			<string>meta.function.nasal</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.nasal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.nasal</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>match stuff like: foobar: func() { … }</string>
			<key>match</key>
			<string>\b([a-zA-Z_?.$][\w?.$]*)\s*:\s*\b(func)\b</string>
			<key>name</key>
			<string>meta.function.hash.nasal</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.nasal</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>match stuff like: func() { … }</string>
			<key>match</key>
			<string>\b(func)\b</string>
			<key>name</key>
			<string>meta.function.nasal</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.new.nasal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.instance.nasal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(new)\s+(\w+(?:\.\w*)?)</string>
			<key>name</key>
			<string>meta.class.instance.constructor</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(if|else|elsif|while|for|foreach|forindex)\b</string>
			<key>name</key>
			<string>keyword.control.nasal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(break(\s+[A-Z]{2,16})?(?=\s*(;|\}))|continue(\s+[A-Z]{2,16})?(?=\s*(;|\}))|([A-Z]{2,16})(?=\s*;([^\)#;]*?;){0,2}[^\)#;]*?\)))\b</string>
			<key>name</key>
			<string>keyword.control.nasal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>!|\*|\-|\+|~|/|==|=|!=|&lt;=|&gt;=|&lt;|&gt;|!|\?|\:|\*=|/=|\+=|\-=|~=|\.\.\.|\b(and|or)\b</string>
			<key>name</key>
			<string>keyword.operator.nasal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(me|arg|parents|obj)\b</string>
			<key>name</key>
			<string>variable.language.nasal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(return|var)\b</string>
			<key>name</key>
			<string>storage.type.nasal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(nil)\b</string>
			<key>name</key>
			<string>constant.language.nil.nasal</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.nasal</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Single quoted strings</string>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.nasal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.nasal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\'</string>
					<key>name</key>
					<string>constant.character.escape.nasal</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.nasal</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Double quoted strings</string>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.nasal</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.nasal</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|r|n|t|\\|")</string>
					<key>name</key>
					<string>constant.character.escape.nasal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>%(?:%|(?:\d+\$)?[+-]?(?:[ 0]|'.{1})?-?\d*(?:\.\d+)?[bcdeEufFgGosxX])</string>
					<key>name</key>
					<string>constant.character.escape.nasal</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.nasal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.nasal</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Single-byte ASCII character constants</string>
			<key>match</key>
			<string>(`).(`)</string>
			<key>name</key>
			<string>string.other</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.nasal</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Comments</string>
			<key>match</key>
			<string>(#).*$\n?</string>
			<key>name</key>
			<string>comment.line.hash.nasal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Integers, floats, and scientific format</string>
			<key>match</key>
			<string>((\b[0-9]+)?\.)?\b[0-9]+([eE][-+]?[0-9]+)?\b</string>
			<key>name</key>
			<string>constant.numeric.nasal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Hex codes</string>
			<key>match</key>
			<string>0[x|X][0-9a-fA-F]+</string>
			<key>name</key>
			<string>constant.numeric.nasal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Square braces</string>
			<key>match</key>
			<string>\[|\]</string>
			<key>name</key>
			<string>meta.brace.square.nasal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\;</string>
			<key>name</key>
			<string>punctuation.terminator.statement.nasal</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.begin.nasal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.end.nasal</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\[)(\])</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.begin.nasal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.end.nasal</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.begin.nasal</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.scope.end.nasal</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>comment</key>
			<string>Illegal characters</string>
			<key>match</key>
			<string>%|\$|@|&amp;|\^|\||\\|`</string>
			<key>name</key>
			<string>invalid.illegal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>TODO: Symbols in hash keys</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Core functions</string>
			<key>match</key>
			<string>\b(append|bind|call|caller|chr|closure|cmp|compile|contains|delete|die|find|ghosttype|id|int|keys|left|num|pop|right|setsize|size|sort|split|sprintf|streq|substr|subvec|typeof|readline)\b</string>
			<key>name</key>
			<string>variable.language.nasal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>FG ext core functions</string>
			<key>match</key>
			<string>\b(abort|abs|aircraftToCart|addcommand|airportinfo|airwaysRoute|assert|carttogeod|cmdarg|courseAndDistance|createDiscontinuity|createViaTo|createWP|createWPFrom|defined|directory|fgcommand|findAirportsByICAO|findAirportsWithinRange|findFixesByID|findNavaidByFrequency|findNavaidsByFrequency|findNavaidsByID|findNavaidsWithinRange|finddata|flightplan|geodinfo|geodtocart|get_cart_ground_intersection|getprop|greatCircleMove|interpolate|isa|logprint|magvar|maketimer|start|stop|restart|maketimestamp|md5|navinfo|parse_markdown|parsexml|print|printf|printlog|rand|registerFlightPlanDelegate|removecommand|removelistener|resolvepath|setlistener|_setlistener|setprop|srand|systime|thisfunc|tileIndex|tilePath|values)\b</string>
			<key>name</key>
			<string>support.function.nasal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>FG ext core functions</string>
			<key>match</key>
			<string>\b(singleShot|isRunning|simulatedTime)\b</string>
			<key>name</key>
			<string>support.function.nasal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>FG ext core constants</string>
			<key>match</key>
			<string>\b(D2R|FPS2KT|FT2M|GAL2L|IN2M|KG2LB|KT2FPS|KT2MPS|LG2GAL|LB2KG|M2FT|M2IN|M2NM|MPS2KT|NM2M|R2D)\b</string>
			<key>name</key>
			<string>constant.language.nasal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>FG func props</string>
			<key>match</key>
			<string>\b(addChild|addChildren|alias|clearValue|equals|getAliasTarget|getAttribute|getBoolValue|getChild|getChildren|getIndex|getName|getNode|getParent|getPath|getType|getValue|getValues|initNode|remove|removeAllChildren|removeChild|removeChildren|setAttribute|setBoolValue|setDoubleValue|setIntValue|setValue|setValues|unalias|compileCondition|condition|copy|dump|getNode|nodeList|runBinding|setAll|wrap|wrapNode)\b</string>
			<key>name</key>
			<string>support.function.nasal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>FG node class</string>
			<key>match</key>
			<string>\b(Node)\b</string>
			<key>name</key>
			<string>support.class.nasal</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>FG func props variables</string>
			<key>match</key>
			<string>\b(props|globals)\b</string>
			<key>name</key>
			<string>variable.language.nasal</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.class.nasal</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.function.nasal</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>support.constant.nasal</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>FG math class</string>
			<key>match</key>
			<string>\b(math)\.(?:(abs|acos|asin|atan2|avg|ceil|clamp|cos|exp|floor|fmod|in|log10|max|min|mod|periodic|pow|round|sin|sgn|sqrt|tan)|(e|pi))\b</string>
			<key>name</key>
			<string>support.other.nasal</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.nasal</string>
	<key>uuid</key>
	<string>FB267EFD-4B62-457C-8D3E-17A368A29735</string>
</dict>
</plist>
